name: Build MasterCombat Auto Release

on:
  push:
    branches: [ "master" ]
    paths:
      - "src/**"
      - "pom.xml"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      - name: Configure Git
        run: |
          git config --global user.email "no-reply@github.com"
          git config --global user.name "OPmasterLEO"

      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      - name: Get plugin version from pom.xml
        id: version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Determine release version
        id: release_version
        run: |
          ARTIFACT_VERSION=${{ steps.version.outputs.version }}
          git fetch --tags

          # Check last release artifact version
          LATEST_RELEASE=$(gh release list --repo $GITHUB_REPOSITORY --limit 1 | awk '{print $1}')
          if [ "$LATEST_RELEASE" != "" ]; then
            LAST_VERSION=$(echo "$LATEST_RELEASE" | grep -oP '\d+\.\d+\.\d+')
          else
            LAST_VERSION=""
          fi

          # Increment patch if same as pom.xml
          if [ "$LAST_VERSION" = "$ARTIFACT_VERSION" ]; then
            IFS='.' read -r MAJOR MINOR PATCH <<< "$ARTIFACT_VERSION"
            PATCH=$((PATCH + 1))
            ARTIFACT_VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          RELEASE_TAG="MasterCombat-v$ARTIFACT_VERSION"
          echo "release_version=$ARTIFACT_VERSION" >> $GITHUB_OUTPUT
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "Release version: $ARTIFACT_VERSION"
          echo "Release tag: $RELEASE_TAG"

      - name: Generate release notes
        id: release_notes
        run: |
          REPO="${GITHUB_REPOSITORY}"
          git fetch --tags

          # Only include commits touching src/ or pom.xml
          COMMITS=$(git log ${RELEASE_TAG}..HEAD --pretty=format:"%s|%H" -- src/ pom.xml)

          FEATURES=""
          FIXES=""
          IMPROVEMENTS=""
          OTHER=""

          if [ -z "$COMMITS" ]; then
            NOTES="No changes made."
          else
            while IFS="|" read -r MSG HASH; do
              SHORT_HASH=${HASH:0:7}
              LINK='[`'"$SHORT_HASH"'`](https://github.com/'"$REPO"'/commit/'"$HASH"')'

              MSG_LOWER=$(echo "$MSG" | tr '[:upper:]' '[:lower:]')

              if echo "$MSG_LOWER" | grep -qE '\b(add|added|new|implement|create)\b'; then
                FEATURES+="$LINK $MSG\n"
              elif echo "$MSG_LOWER" | grep -qE '\b(fix|fixed|bug|patch|repair)\b'; then
                FIXES+="$LINK $MSG\n"
              elif echo "$MSG_LOWER" | grep -qE '\b(improve|optimized|optimize|refactor|enhance)\b'; then
                IMPROVEMENTS+="$LINK $MSG\n"
              else
                OTHER+="$LINK $MSG\n"
              fi
            done <<< "$COMMITS"

            NOTES=""

            [ -n "$FEATURES" ] && NOTES+="🎯 New Features:\n$FEATURES\n"
            [ -n "$FIXES" ] && NOTES+="🐞 Fixes:\n$FIXES\n"
            [ -n "$IMPROVEMENTS" ] && NOTES+="⚡ Improvements/Optimizations:\n$IMPROVEMENTS\n"
            [ -n "$OTHER" ] && NOTES+="📝 Other:\n$OTHER\n"
          fi

          echo -e "$NOTES" > release_notes.md
          cat release_notes.md

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: MasterCombat
          path: target/MasterCombat-v${{ steps.release_version.outputs.release_version }}.jar

      - name: Create or update release
        uses: softprops/action-gh-release@v2
        with:
          name: "MasterCombat-v${{ steps.release_version.outputs.release_version }}"
          tag_name: "${{ steps.release_version.outputs.release_tag }}"
          files: target/MasterCombat-v${{ steps.release_version.outputs.release_version }}.jar
          body_path: ./release_notes.md
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false
