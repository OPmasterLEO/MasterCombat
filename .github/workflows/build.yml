name: Build MasterCombat Auto Release

on:
  push:
    branches: [ "master" ]
    paths:
      - "src/**"
      - "pom.xml"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_NUMBER: ${{ github.run_number }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      - name: Configure Git
        run: |
          git config --global user.email "no-reply@github.com"
          git config --global user.name "OPmasterLEO"

      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      - name: Get plugin version from pom.xml
        id: version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          # Check if it's a SNAPSHOT version
          if [[ "$VERSION" == *"SNAPSHOT"* ]]; then
            echo "is_snapshot=true" >> $GITHUB_OUTPUT
          else
            echo "is_snapshot=false" >> $GITHUB_OUTPUT
          fi

      - name: Get latest release info
        id: latest_release
        run: |
          # Get the latest release tag
          LATEST_TAG=$(git describe --tags --match "MasterCombat-v*" --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$LATEST_TAG" ]; then
            # Extract version from tag
            LATEST_VERSION=$(echo "$LATEST_TAG" | sed 's/MasterCombat-v//')
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
            echo "has_previous_release=true" >> $GITHUB_OUTPUT
          else
            echo "has_previous_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Compare versions and determine release type
        id: version_check
        run: |
          CURRENT_VERSION=${{ steps.version.outputs.version }}
          HAS_PREVIOUS=${{ steps.latest_release.outputs.has_previous_release }}
          IS_SNAPSHOT=${{ steps.version.outputs.is_snapshot }}
          
          if [ "$IS_SNAPSHOT" = "true" ]; then
            echo "release_type=pre-release" >> $GITHUB_OUTPUT
            echo "is_higher_version=false" >> $GITHUB_OUTPUT
          elif [ "$HAS_PREVIOUS" = "true" ]; then
            LATEST_VERSION=${{ steps.latest_release.outputs.latest_version }}
            
            # Compare versions using sort -V (version sort)
            HIGHER_VERSION=$(printf "%s\n%s" "$CURRENT_VERSION" "$LATEST_VERSION" | sort -V | tail -n1)
            
            if [ "$HIGHER_VERSION" = "$CURRENT_VERSION" ] && [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
              echo "is_higher_version=true" >> $GITHUB_OUTPUT
              echo "release_type=release" >> $GITHUB_OUTPUT
            else
              echo "is_higher_version=false" >> $GITHUB_OUTPUT
              echo "release_type=update" >> $GITHUB_OUTPUT
            fi
          else
            # First release
            echo "is_higher_version=true" >> $GITHUB_OUTPUT
            echo "release_type=release" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          REPO="${{ github.repository }}"
          git fetch --tags
          
          # Determine which commits to include based on release type
          if [ "${{ steps.version_check.outputs.release_type }}" = "release" ]; then
            # For new releases, show all commits since last release
            LATEST_TAG="${{ steps.latest_release.outputs.latest_tag }}"
            COMMITS=$(git log --no-merges --pretty=format:"%s|%an|%H" "$LATEST_TAG..HEAD" -- src/ pom.xml)
          else
            # For pre-releases/updates, show only new commits since last pre-release
            # Get the most recent pre-release tag (any tag with "build" in it)
            LATEST_PRERELEASE_TAG=$(git tag --list "*build*" --sort=-creatordate | head -n 1)
            if [ -z "$LATEST_PRERELEASE_TAG" ]; then
              # If no pre-release tags found, fall back to last release
              LATEST_PRERELEASE_TAG="${{ steps.latest_release.outputs.latest_tag }}"
            fi
            COMMITS=$(git log --no-merges --pretty=format:"%s|%an|%H" "$LATEST_PRERELEASE_TAG..HEAD" -- src/ pom.xml)
          fi
          
          # Initialize sections
          FEATURES=""
          FIXES=""
          IMPROVEMENTS=""
          REFACTOR=""
          DOCS=""
          OTHER=""
          
          if [ -z "$COMMITS" ]; then
            NOTES="No significant changes since last release."
          else
            # Process each commit
            while IFS="|" read -r MSG AUTHOR HASH; do
              SHORT_HASH=${HASH:0:7}
              LINK="[\`${SHORT_HASH}\`](https://github.com/${REPO}/commit/${HASH})"
              
              # Clean up the message (remove PR references, etc.)
              CLEAN_MSG=$(echo "$MSG" | sed -E 's/\(#.*\)//g' | xargs)
              
              # Categorize based on commit message
              MSG_LOWER=$(echo "$CLEAN_MSG" | tr '[:upper:]' '[:lower:]')
              
              if echo "$MSG_LOWER" | grep -qE '\b(add|added|new|implement|create|feat|feature)\b'; then
                FEATURES+="- $CLEAN_MSG $LINK - $AUTHOR\n"
              elif echo "$MSG_LOWER" | grep -qE '\b(fix|fixed|bug|patch|repair|resolve|issue)\b'; then
                FIXES+="- $CLEAN_MSG $LINK - $AUTHOR\n"
              elif echo "$MSG_LOWER" | grep -qE '\b(improve|optimiz|refactor|enhance|perf)\b'; then
                IMPROVEMENTS+="- $CLEAN_MSG $LINK - $AUTHOR\n"
              elif echo "$MSG_LOWER" | grep -qE '\b(doc|readme|changelog|comment)\b'; then
                DOCS+="- $CLEAN_MSG $LINK - $AUTHOR\n"
              elif echo "$MSG_LOWER" | grep -qE '\b(refactor|cleanup|style|format)\b'; then
                REFACTOR+="- $CLEAN_MSG $LINK - $AUTHOR\n"
              else
                OTHER+="- $CLEAN_MSG $LINK - $AUTHOR\n"
              fi
            done <<< "$COMMITS"
            
            # Build the release notes
            NOTES="## MasterCombat v${{ steps.version.outputs.version }}\n\n"
            
            if [ "${{ steps.version_check.outputs.release_type }}" = "release" ]; then
              NOTES+="### What's Changed\n\n"
            else
              NOTES+="### Development Build (${{ env.BUILD_NUMBER }})\n\n"
            fi
            
            [ -n "$FEATURES" ] && NOTES+="#### 🎯 New Features\n$FEATURES\n"
            [ -n "$FIXES" ] && NOTES+="#### 🐞 Bug Fixes\n$FIXES\n"
            [ -n "$IMPROVEMENTS" ] && NOTES+="#### ⚡ Improvements\n$IMPROVEMENTS\n"
            [ -n "$REFACTOR" ] && NOTES+="#### 🔧 Refactoring\n$REFACTOR\n"
            [ -n "$DOCS" ] && NOTES+="#### 📚 Documentation\n$DOCS\n"
            [ -n "$OTHER" ] && NOTES+="#### 📝 Other Changes\n$OTHER\n"
          fi
          
          # Add build info
          NOTES+="\n---\n"
          NOTES+="**Build**: ${{ env.BUILD_NUMBER }} | **Version**: ${{ steps.version.outputs.version }}\n"
          NOTES+="**Date**: $(date +%Y-%m-%d)\n"
          
          echo -e "$NOTES" > release_notes.md
          cat release_notes.md

      - name: Upload artifact
        if: steps.version_check.outputs.release_type != 'pre-release'
        uses: actions/upload-artifact@v4
        with:
          name: MasterCombat
          path: ./${{ steps.prepare_artifact.outputs.jar_name }}

      - name: Prepare artifact
        id: prepare_artifact
        run: |
          VERSION=${{ steps.version.outputs.version }}
          
          if [ "${{ steps.version_check.outputs.release_type }}" = "pre-release" ]; then
            # For pre-releases, use SNAPSHOT-build number suffix
            JAR_NAME="MasterCombat-v${VERSION}-build-${{ env.BUILD_NUMBER }}.jar"
          else
            JAR_NAME="MasterCombat-v${VERSION}.jar"
          fi
          
          mv target/MasterCombat-v${VERSION}.jar ./${JAR_NAME}
          echo "jar_name=${JAR_NAME}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: MasterCombat
          path: ./${{ steps.prepare_artifact.outputs.jar_name }}

      - name: Create or update release
        uses: softprops/action-gh-release@v2
        with:
          name: "MasterCombat v${{ steps.version.outputs.version }} ${{ steps.version_check.outputs.release_type == 'pre-release' && format('(Build {0})', env.BUILD_NUMBER) || '' }}"
          tag_name: "${{ steps.version.outputs.version }}${{ steps.version_check.outputs.release_type == 'pre-release' && format('-build-{0}', env.BUILD_NUMBER) || '' }}"
          files: ./${{ steps.prepare_artifact.outputs.jar_name }}
          body_path: ./release_notes.md
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: ${{ steps.version_check.outputs.release_type == 'pre-release' }}